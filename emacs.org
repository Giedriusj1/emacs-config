#+TITLE: Emacs config

* INIT BASICS
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-

(message "emacs.org : starting init stage")

(require 'package)
(require 'cl)

(add-to-list 'load-path "~/.emacs.d/elpa")
(add-to-list 'load-path "~/.emacs.d/custom-packages")
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; not needed since emacs 27
(when (not package--initialized) (package-initialize) )
#+end_src

** garbage collection
#+BEGIN_SRC emacs-lisp
(require 'gcmh)
(gcmh-mode 1)

;; (setq gcmh-verbose t)
(setq gcmh-time-constant 10)

;; Let's garbage collect when focusing out of the window..
(add-hook 'focus-out-hook #'garbage-collect)
;; and saving files.
(add-hook 'after-save-hook       #'garbage-collect)
#+END_SRC

* PACKAGES
#+begin_src emacs-lisp
(message "emacs.org : package fetching stage")
(setq url-http-attempt-keepalives nil)

(defvar package-list
  '(
    ag
    clang-format
    company
    company-lsp
    elfeed
    elisp-format
    ggtags
    git-auto-commit-mode
    haskell-mode
    helm
    helm-ag
    helm-c-yasnippet
    helm-descbinds
    helm-lsp
    helm-org-rifle
    helm-projectile
    helm-swoop
    helm-xref
    hydra
    lsp-clangd
    lsp-mode
    magit
    projectile
    rust-mode
    scala-mode
    shell-here
    smart-mode-line
    swiper
    swiper-helm
    yaml-mode
    yasnippet
    yasnippet-snippets
    )
  )

(if (not (display-graphic-p))
    ;; Currently key-chord is only used on terminals to simulate Control-semi
    (add-to-list 'package-list 'key-chord)
  )


(defun packages-installed ()
  (loop for p in package-list
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(unless (packages-installed)
  (package-refresh-contents)

  (dolist (p package-list)
    (when (not (package-installed-p p))
      (package-install p))))


#+end_src

* LOOKS
#+begin_src emacs-lisp
(message "emacs.org : starting looks stage")
#+end_src

** font helper functions
#+BEGIN_SRC emacs-lisp
(setq current-font "normal")

(defun set-windows-font (mode)
  (cond
   ((string= mode "normal")
	;; (cond
	;; ((member "ProggyClean" (font-family-list))
	;; (set-frame-font "ProggyClean"))
	;; ((member "Consolas-10" (font-family-list))
	;; (set-frame-font "Consolas-10"))
	;; )
	(set-frame-font "Consolas-10")
	)
   ((string= mode "medium") (set-frame-font "Consolas-11"))
   ((string= mode "4k") (set-frame-font "Consolas-12"))))

(defun set-linux-font (mode)
  (cond
   ((string= mode "normal") (set-frame-font "Monospace-10"))
   ((string= mode "medium") (set-frame-font "Monospace-12"))
   ((string= mode "4k") (set-frame-font "Monospace-16"))))

(defun set-font (mode)
  (progn
    (setq current-font mode)
    (cond
     ((string-equal system-type "windows-nt")
      ;; We are dealing with Windows sytem
      (set-windows-font mode))
     ((string-equal system-type "gnu/linux")
      ;; We are dealing with linux system:
      (set-linux-font mode)))))


(defun toggle-font-size()
  (interactive)
  (cond
   ((string= current-font "normal")
    (set-font "medium"))
   ((string= current-font "medium")
    (set-font "4k"))
   ((string= current-font "4k")
    (set-font "normal"))))

;; Default font size
(defun set-font-normal ()
  (interactive)
    (set-font "normal"))

;; Larger than normal, but not as big as 4k
(defun set-font-medium ()
  (interactive)
    (set-font "medium"))

;; Sets font size to something that's usable under 4k monitor
(defun set-font-4k ()
  (interactive)
    (set-font "4k"))

(defun is-4k-monitor ()
  (and (<= 2840 (x-display-pixel-width)) (<= 2160 (x-display-pixel-height))))

(defun set-font-for-current-resolution ()
  (interactive)
  (cond
   ((is-4k-monitor) (set-font-4k))
   (t (set-font-normal))))
#+END_SRC

** themes and colours
#+BEGIN_SRC emacs-lisp
;; On emacs 27 this will be done from early-init.el
(if (< emacs-major-version 27)
    (progn
      (customize-set-variable 'scroll-bar-mode nil)
      (customize-set-variable 'horizontal-scroll-bar-mode nil)
      (customize-set-variable 'menu-bar-mode nil)
      (customize-set-variable 'tool-bar-mode nil)))


(custom-set-variables
 '(custom-safe-themes
   (quote
    ("a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e"
     "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" default))))

(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :weight demibold :foreground "orange3" :height 1.2))))
 '(org-level-2 ((t (:inherit outline-2 :weight demibold :foreground "darkOliveGreen3" :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :weight demibold :height 1.1))))
 '(org-level-4 ((t (:inherit outline-4 :weight demibold :height 1.0))))
 '(org-level-5 ((t (:inherit outline-5 :weight demibold :height 1.0))))
 )


;; Terminal displays are often not happy about certain colours, so we only set them if we are running
;; within a graphic display environment
(if (display-graphic-p)
    (progn
      (custom-set-variables
       '(custom-enabled-themes (quote (wombat))))

      (custom-set-faces
       '(default ((t (:background "#101515"))))
       '(cursor ((t (:background "OrangeRed"))))
       '(mode-line-inactive ((t (:background "#101010"))))
       '(mode-line ((t (:background "#404040"))))
       '(hl-line ((t (:inherit nil :background "#222222"))))
       '(minibuffer-prompt ((t (:foreground "#ff584d"))))

       ;; Make some default wombat colours a bit more lively
       '(font-lock-builtin-face ((((class color) (min-colors 89)) (:foreground "#ff685d"))))
       '(font-lock-constant-face ((((class color) (min-colors 89)) (:foreground "#ff685d"))))

       ;; Some default helm faces are quite ugly... let's fix em up.
       '(helm-selection ((t (:background "grey24" :distant-foreground "black"))))
       '(helm-buffer-directory ((t (:weight bold :foreground "LightSlateBlue" :distant-foreground "black"))))
       '(helm-ff-directory ((t :inherit helm-buffer-directory )))
       '(helm-source-header ((t (:background "#450a6b" :foreground "#dddddd" :weight bold :height 1.3 :family "Sans Serif")))))

      (set-font-for-current-resolution)

      (global-hl-line-mode t)

      (sml/setup)))

#+END_SRC

** rendering
 #+BEGIN_SRC emacs-lisp
 (setq-default bidi-display-reordering nil)
 #+END_SRC
** Buffer names
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

* BEHAVIOUR
#+begin_src emacs-lisp
(message "emacs.org : starting behaviour stage")
#+end_src
** elfeed
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
      '("http://nullprogram.com/feed/"
        "http://planet.emacsen.org/atom.xml"
        "https://www.spacerogue.net/wordpress/?feed=rss2"
        "https://mjg59.dreamwidth.org/data/rss"
))
#+END_SRC
** Keyboard
*** maps
#+begin_src emacs-lisp
(define-prefix-command 'control-semi-map)
(define-prefix-command 'tab-map)

(require 'bind-key)
(bind-key* "C-;" 'control-semi-map)

(if (not (display-graphic-p))
    (progn
    (require 'key-chord)
    (key-chord-mode 1)
    (key-chord-define-global ";;" 'control-semi-map)))

(bind-key* "<tab>" 'tab-map)
(bind-key* "M-;" 'tab-map)
#+end_src

*** global map
#+begin_src emacs-lisp
(global-set-key [f9] 'toggle-font-size)
(global-set-key [f10] 'toggle-truncate-lines)
(global-set-key [f11] 'toggle-frame-fullscreen)
(global-set-key [f12] 'whitespace-mode)

(global-set-key (kbd "<Scroll_Lock>") 'scroll-lock-mode)
(global-set-key (kbd "<up>") 'scroll-down-line)
(global-set-key (kbd "<down>") 'scroll-up-line)

(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)


(bind-key* "M-," 'backward-kill-word)
(bind-key* "M-." 'kill-word)

(global-set-key (kbd "M-,") 'backward-kill-word)
(global-set-key (kbd "<down>") 'scroll-up-line)

(global-set-key (kbd "C-d") 'global-superword-mode)
(global-set-key (kbd "C-M-SPC") 'rectangle-mark-mode)

(bind-key* "C-," 'delete-backward-char)
(bind-key* "C-." 'delete-char)

(bind-key* "M-h" 'open-line)

(bind-key* "C-u" 'backward-char)
(bind-key* "C-o" 'forward-char)

(bind-key* "M-u" 'backward-word)
(bind-key* "M-o" 'forward-word)

(bind-key* "C-M-u" 'backward-sexp)
(bind-key* "C-M-o" 'forward-sexp)

(bind-key* "C-d" 'Control-X-prefix)
(bind-key* "C-a" 'Control-X-prefix)

(bind-key* "C-q" 'beginning-of-line)
(bind-key* "C-w" 'back-to-indentation)
#+end_src

*** ctl-x-map
#+begin_src emacs-lisp
(define-key ctl-x-map "\C-f" 'helm-find-files)
(define-key ctl-x-map "\C-d" (lambda ()
                               (interactive)
                               (dired default-directory)))
#+end_src
*** control-semi-map
#+begin_src emacs-lisp
(define-key control-semi-map (kbd "SPC") 'point-to-register)
(define-key control-semi-map (kbd "C-SPC") 'point-to-register)
(define-key control-semi-map (kbd "j") 'jump-to-register)
(define-key control-semi-map (kbd "h") 'highlight-phrase)
(define-key control-semi-map (kbd "q") 'goto-line)

(define-key control-semi-map (kbd "C-j") 'jump-to-register)
(define-key control-semi-map (kbd "C-q") 'goto-line)
(define-key control-semi-map (kbd "C-l") 'execute-extended-command)
(define-key control-semi-map (kbd "C-1") 'zygospore-toggle-delete-other-windows)
(define-key control-semi-map (kbd "C-2") 'split-window-below)

(define-key control-semi-map (kbd "C-2") '(lambda ()
                                            (interactive)
                                            (split-window-below)
                                            (balance-windows)))

(define-key control-semi-map (kbd "C-3") '(lambda ()
                                            (interactive)
                                            (split-window-right)
                                            (balance-windows)))


(define-key control-semi-map (kbd "C-0") '(lambda ()
                                            (interactive)
                                            (delete-window)
                                            (balance-windows)))

(define-key control-semi-map (kbd "C-4") 'balance-windows)

(define-key control-semi-map (kbd "C-d") 'follow-mode)
#+end_src
*** tab map
#+begin_src emacs-lisp
(define-key tab-map (kbd "TAB") 'comment-dwim)
(define-key tab-map (kbd "M-;") 'comment-dwim)
(define-key tab-map (kbd "u") 'universal-argument)

(define-key tab-map (kbd "i")
  '(lambda ()
     (interactive)
     (cond ((or ( string= "c++-mode" major-mode)
                ( string= "c-mode" major-mode))
            (if (use-region-p)
                (clang-format-region (region-beginning)
                                     (region-end) )
              (clang-format-region (point)
                                   (point))))
           (( string= "emacs-lisp-mode" major-mode)
            (elisp-format-region))
           (t (message "Argh...don't know how to format in this mode :(")))))
#+end_src

** anzu
#+BEGIN_SRC emacs-lisp
;; Show number of matches in mode-line while searching
(require 'anzu)
(global-anzu-mode t)
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
(require 'hydra)

(defun spawn-local-mode-hydra ()
  (interactive)
  (cond
   (( string= "org-mode" major-mode)
    (hydra-tab-org/body))
   (( string= "c-mode" major-mode)
    (hydra-c/body))
   (( string= "c++-mode" major-mode)
    (hydra-c/body))
   (( string= "python-mode" major-mode)
    (hydra-python/body))
   (( string= "emacs-lisp-mode" major-mode)
    (hydra-emacs-lisp/body))
   (t (message "Argh...hydra for your current mode does not exist :("))))

(define-key tab-map (kbd "j") 'spawn-local-mode-hydra)
(define-key tab-map (kbd "m") 'hydra-magit/body)
(define-key tab-map (kbd "p") 'hydra-projectile/body)
(define-key tab-map (kbd ";") 'hydra-quickopen/body)

(define-key tab-map (kbd "o") 'hydra-search-helper/body)
(define-key tab-map (kbd "f") 'hydra-frame-helper/body)

(defhydra hydra-search-helper (:color blue)
 "
[_q_] update tags        [_o_] find gtag
[_c_] create gtag        [_p_] xref find references
 "
  ("q" ggtags-update-tags nil)
  ("c" ggtags-create-tags nil)
  ("o" ggtags-find-tag-dwim nil)
  ("p" lsp-find-references nil))

(defhydra hydra-frame-helper (:color blue)
 "
[_m_] make frame        [_o_] other frame        [_d_] delete frame
 "
  ("m" make-frame nil)
  ("o" other-frame nil)
  ("d" delete-frame nil))
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)

;; Make projectiel use external tools for file indexing.
;; If this breaks revert to 'native for more reliability.
(setq projectile-indexing-method 'alien)

(projectile-global-mode t)

(defcustom g/helm-source-projectile-projects-actions
  (helm-make-actions
   "Open Dired in project's directory `C-d'" #'dired
   "Switch to project" (lambda (project)
                         (let ((projectile-completion-system 'helm))
                           (projectile-switch-project-by-name project)))
   "Open project root in vc-dir or magit `M-g'" #'helm-projectile-vc
   "Switch to Eshell `M-e'" #'helm-projectile-switch-to-eshell
   "Grep in projects `C-s'" #'helm-projectile-grep
   "Compile project `M-c'. With C-u, new compile command" #'helm-projectile-compile-project
   "Remove project(s) from project list `M-D'" #'helm-projectile-remove-known-project)
  "Actions for `helm-source-projectile-projects'."
  :group 'helm-projectile
  :type '(alist :key-type string :value-type function))

(defvar g/helm-source-projectile-projects
  (helm-build-sync-source "Projectile projects"
    :candidates (lambda () (with-helm-current-buffer projectile-known-projects))
    :fuzzy-match helm-projectile-fuzzy-match
    :keymap helm-projectile-projects-map
    :mode-line helm-read-file-name-mode-line-string
    :action 'g/helm-source-projectile-projects-actions)
  "Helm source for known projectile projects.")

(defun helm-projectile-projects ()
  (interactive)
  (let ((helm-ff-transformer-show-only-basename nil))
    (helm :sources '(g/helm-source-projectile-projects)
          :buffer "*helm projectile projects*"
          :truncate-lines helm-projectile-truncate-lines)))

(customize-set-variable 'helm-projectile-sources-list
                        '(helm-source-projectile-buffers-list
                          helm-source-projectile-files-list))

(defhydra hydra-projectile (:color blue)
  "
[_q_] invalidate cache [_p_] projects
[_j_] helm projectile  [_d_] dired projectile root
[_g_]rep [_m_] ag [_a_]ck
"
  ("p" helm-projectile-projects nil)
  ("q" projectile-invalidate-cache nil)

  ("j" helm-projectile nil)
  ("d" projectile-dired nil)

  ("g" helm-projectile-grep nil)
  ("a" helm-projectile-ack nil)
  ("m" helm-projectile-ag nil))
#+END_SRC

** cua-mode
#+begin_src emacs-lisp
(cua-mode 1)
(bind-key "C-f" 'cua-exchange-point-and-mark)

;; (bind-key* "C-c" 'kill-ring-save)
(bind-key* "C-v" 'yank)
#+end_src

** clang
*** clang-format
#+BEGIN_SRC emacs-lisp
(setq clang-format-style "{BasedOnStyle: google, ColumnLimit: 100, IndentWidth: 3, BreakBeforeBraces: Stroustrup}")
#+END_SRC
** recentf
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 100)
(setq recentf-max-saved-items 100)
#+end_src

** windmove + frame selection
#+begin_src emacs-lisp
(require 'zygospore)

(setq windmove-wrap-around t )
(bind-key* "C-1" 'window-swap-states)
(bind-key* "C-2" 'windmove-up)
(bind-key* "C-3" 'windmove-right)
#+end_src

** shell
#+begin_src emacs-lisp
(bind-key* "C-`" 'shell-here)

(add-hook 'shell-mode-hook #'company-mode)
#+end_src

** dired
#+begin_src emacs-lisp
(require 'dired)
(require 'dired-extension)

(setq dired-dwim-target t)

(define-key dired-mode-map (kbd "l") 'dired-up-directory)
(define-key dired-mode-map (kbd "r") 'dired-do-redisplay)

(setq dired-listing-switches "-alFh")

;; Taken from: https://github.com/aculich/.emacs.d/blob/master/init.el
(when (or (memq system-type '(gnu gnu/linux))
          (string= (file-name-nondirectory insert-directory-program) "gls"))
  ;; If we are on a GNU system or have GNU ls, add some more `ls' switches:
  ;; `--group-directories-first' lists directories before files, and `-v'
  ;; sorts numbers in file names naturally, i.e. "image1" goes before
  ;; "image02"
  (setq dired-listing-switches
        (concat dired-listing-switches " --group-directories-first -v")))


(defun open-in-external-app ()
  "Open the current file or dired marked files in external app."
  (interactive)
  (let ( doIt
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           (t (list (buffer-file-name))) ) ) )

    (setq doIt (if (<= (length myFileList) 5)
                   t
                 (y-or-n-p "Open more than 5 files?") ) )

    (when doIt
      (cond
       ((string-equal system-type "windows-nt")
        (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList)
        )
       ((string-equal system-type "darwin")
        (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList) )
       ((string-equal system-type "gnu/linux")
        (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList))))))

#+end_src

** company
#+begin_src emacs-lisp
(require 'company)
(require 'company-lsp)

(global-company-mode t)

(push 'company-lsp company-backends)

;; (add-to-list 'company-backends '(company-clang))

(add-to-list 'company-backends '(company-gtags))
(add-to-list 'company-backends '(company-lsp))


(define-key company-active-map (kbd "C-n") #'company-select-next)
(define-key company-active-map (kbd "C-p") #'company-select-previous)

(define-key control-semi-map (kbd "n") 'company-complete)

(define-key control-semi-map (kbd "C-n") 'dabbrev-expand)

(setq company-tooltip-limit 25)
#+end_src

** ORG mode
#+BEGIN_SRC emacs-lisp
(defhydra hydra-tab-org (:color blue)
  "
 [_o_]   metaright   [_u_]   metaleft  [_n_]   metaup  [_p_]   metadown
 [_C-o_] shiftright  [_C-u_] shiftleft [_C-n_] shiftup [_C-p_] shiftdown
 [_e_]   edit source [_s_] exit source edit buffer
 [_c_]   yas helm expand

  "

  ( "o" org-metaright nil)
  ( "u" org-metaleft nil)
  ( "p" org-metaup nil)
  ( "n" org-metadown nil)

  ( "C-o" org-shiftright nil)
  ( "C-u" org-shiftleft nil)
  ( "C-p" org-shiftup nil)
  ( "C-n" org-shiftdown nil)

  ( "e" org-edit-src-code nil)
  ( "s" org-edit-src-exit nil)

  ( "c" helm-yas-complete nil)
  )

(setq org-directory "~/org-notes")
(setq org-src-fontify-natively t)
(setq org-src-preserve-indentation t)
(setq org-startup-indented t)
(setq org-startup-truncated nil)
(setq org-export-with-toc nil)
(setq org-hierarchical-todo-statistics nil)
#+END_SRC
*** org-rifle
#+BEGIN_SRC emacs-lisp
;; Recursive search performs quite poorly on Windows systems
(setq helm-org-rifle-directories-recursive nil)

(defun helm-org-rifle-important ()
  "Rifle through Org files in the directories below"
  (interactive)
  (helm-org-rifle-directories (list
                               "~/org-notes"
                               "~/org-notes/lang-notes"
                               "~/org-notes-private"
                               "~/.emacs.d"
                               )))
#+END_SRC

*** org-notes synching
**** git push/pull timer
#+BEGIN_SRC emacs-lisp
(defun org-notes-synch-fn ()
(interactive)
  (let* ((default-directory "~/org-notes"))
	(message "synching org notes with git repo")
	(start-process "proc-git-status" "notes-sync-output" "git" "status")
	(sit-for 5)
	(start-process "proc-git-pull" "notes-sync-output" "git" "pull")
	(sit-for 5)
	(start-process "proc-git-push" "notes-sync-output" "git" "push")))

;; Run the above every hour (if we are idle)
(run-with-idle-timer (* 60 60) t 'org-notes-synch-fn)
#+END_SRC
**** git-auto-commit
#+BEGIN_SRC emacs-lisp
;; Make sure we push after commiting too
;; (setq gac-automatically-push-p t)
#+END_SRC

** winner mode
#+begin_src emacs-lisp
(winner-mode 1)
(define-key control-semi-map (kbd "C-u") 'winner-undo)
(define-key control-semi-map (kbd "C-o") 'winner-redo)
#+end_src

** Misc behaviour
#+begin_src emacs-lisp
;; set to t to investigate crashes
(setq debug-on-error nil)
(setq inhibit-splash-screen t)
(setq initial-scratch-message "")
(setq column-number-mode t)
(setq history-length 25)
(setq select-enable-clipboard t) ;; Merge OS and Emacs' clipboards

(setq auto-window-vscroll nil)   ;; Gives us better line scrolling performance

;; We'll ask emacs to put all customizations made via it's customize package in a
;; separate file... so we can ignore it later :)
(setq custom-file (concat user-emacs-directory "/custom--ignored.el"))

(blink-cursor-mode -1)
(require 'auto-highlight-symbol)
(global-auto-highlight-symbol-mode 1)
(delete-selection-mode 1)
(show-paren-mode t)

;; Make the interface a bit more snappy
(setq idle-update-delay 0.1)

(which-function-mode 1)
(custom-set-faces '(which-func ((t (:foreground "LightSlateBlue")))))

;; (customize-set-variable 'electric-pair-mode nil)
(customize-set-variable 'bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks" )

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups

(defun my-create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)

(require 'google-this)

(defadvice text-scale-increase (around all-buffers (arg) activate)
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      ad-do-it)))

(setq ring-bell-function 'ignore)
#+end_src

** Programming
*** indent modes
#+begin_src emacs-lisp
(setq-default c-basic-offset 3 c-default-style "linux")
(setq-default tab-width 3 indent-tabs-mode nil)
#+end_src

*** C/C++ common
#+begin_src emacs-lisp
(defhydra hydra-c (:color blue)
  ( "c" helm-yas-complete "helm yas complete")
  )

(add-hook 'c-mode-common-hook
          (lambda()
            ;; Use C++ style comments
            (setq comment-start "//"
                  comment-end   "")))
#+end_src

*** Python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
      (lambda()
         (setq indent-tabs-mode nil)
         (setq python-indent 4)
         (setq tab-width 4)))

(defhydra hydra-python (:color blue)
  ( "c" helm-yas-complete "helm yas complete"))
#+end_src

*** Scheme
#+begin_src emacs-lisp
(add-hook 'scheme-mode-hook
      (lambda()
         (setq indent-tabs-mode nil)))
#+end_src

*** emacs-lisp
#+begin_src emacs-lisp
(defhydra hydra-emacs-lisp (:color blue)
  ( "j" eval-buffer "eval buffer")
  ( "k" eval-last-sexp "eval-last-sexp")
  ( "c" helm-yas-complete "yas complete"))
#+end_src
** gdb
#+begin_src emacs-lisp
(define-key tab-map (kbd "h") 'hydra-gdb-helper/body)

(defhydra hydra-gdb-helper (:color blue)
  ( "h" gdb-restore-windows "restore gdb windows")
  ( "m" gdb-many-windows "many windows"))
#+end_src
** Mode recognition
#+begin_src emacs-lisp
(setq auto-mode-alist
      '(
        ("\\.org$" . org-mode)
        ("\\.org.gpg$" . org-mode)
        ("\\.ref$" . org-mode)
        ("\\.ref.gpg$" . org-mode)
        ("\\.notes$" . org-mode)
        ("\\.pdf\\'" . doc-view-mode)
        ("\\.md\\'" . markdown-mode)
        ("[Mm]ake[Ff]ile\\'" . makefile-mode)
        ("\\.mak\\'" . makefile-mode)
        ("\\.xml\\'" . xml-mode)

        ;;programming modes
        ("\\.hs$" . haskell-mode)
        ("\\.py\\'" . python-mode)
        ("\\.c\\'" . c-mode)
        ("\\.cc\\'" . c-mode)
        ("\\.cpp\\'" . c++-mode)
        ("\\.h\\'" . c++-mode)
        ("\\.hh\\'" . c++-mode)
        ("\\.hpp\\'" . c++-mode)
        ("\\.s\\'" . c++-mode)
        ("\\.mc\\'" . c++-mode)
        ("\\.java\\'" . java-mode)
        ("\\.el\\'" . emacs-lisp-mode)
        ("\\.scm\\'" . scheme-mode)
        ("\\.rs\\'" . rust-mode)
        ("\\.pm\\'" . perl-mode)
        ("\\.cmd\\'" . bat-mode)
        ("\\.bat\\'" . bat-mode)
        ("\\.yml\\'" . yaml-mode)
        ("\\.scala\\'" . scala-mode)))
#+end_src

** SGML [XML/HTML]
#+BEGIN_SRC emacs-lisp
;; (require 'sgml-mode)

(defun reformat-xml ()
  (interactive)
  ;;todo: this only works in xml-mode, we should spit out an error if we are not

  (save-excursion
    (sgml-pretty-print (point-min) (point-max))
    (indent-region (point-min) (point-max))))
#+END_SRC

** yas
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
** Helm
#+begin_src emacs-lisp
(require 'helm-config)
(require 'asm-mode)

(setq helm-candidate-number-limit 500)

(global-set-key (kbd "C-j") 'helm-mini)
(define-key org-mode-map (kbd "C-j") 'helm-mini)
(define-key asm-mode-map (kbd "C-j") 'helm-mini)
(define-key lisp-interaction-mode-map (kbd "C-j") 'helm-mini)

(define-key control-semi-map (kbd "C-s") 'helm-semantic-or-imenu)

(define-key control-semi-map (kbd "l") 'helm-M-x)
(define-key control-semi-map (kbd "o") 'swiper-helm)
(define-key control-semi-map (kbd "C-;") 'swiper-helm)

(define-key control-semi-map (kbd "r") 'helm-mark-ring)
(define-key control-semi-map (kbd "C-r") 'helm-global-mark-ring)

(define-key control-semi-map (kbd "b") 'helm-resume)
(define-key control-semi-map (kbd "C-b") 'helm-resume)

(define-key control-semi-map (kbd "C-m") 'helm-swoop)
(define-key control-semi-map (kbd "m") 'helm-multi-swoop-all)

(setq helm-buffer-max-length 60)
#+end_src

** helm-xref
#+BEGIN_SRC emacs-lisp
(require 'helm-xref)
(setq xref-show-xrefs-function 'helm-xref-show-xrefs)
#+END_SRC

** magit
#+begin_src emacs-lisp
(defhydra hydra-magit (:color blue)
  "magit"
  ("m" magit-status "status")
  ("p" magit-pull "pull")
  ("P" magit-push "push")
  ("c" magit-commit "commit")
  ("l" magit-log "log")
  ("d" magit-diff-dwim "diff-dwim")
  ("D" magit-diff "diff")
  ("b" magit-blame "blame"))
#+end_src

** ediff
#+begin_src emacs-lisp
;; We need to make sure ediff library is loaded, otherwise us fiddling with its colours below
;; will not end well. TODO: improve this
(require 'ediff)

;; Setting this to t will only show two panes.
;; This set to nil can be useful when dealing wih merge conflicts.
(setq magit-ediff-dwim-show-on-hunks t)

;; turn off whitespace checking:
(setq ediff-diff-options "-w")

;; Don't spawn new window for ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; split window horizontally
(setq ediff-split-window-function 'split-window-horizontally)


;; Since edif colours really don't play nicely with dark themes, we'll just overload them
;; with magit colours. (This hack is taken from https://github.com/bbatsov/solarized-emacs/issues/194)
(dolist (entry '((ediff-current-diff-C . ((((class color) (background light))
                                             (:background "#DDEEFF" :foreground "#005588"))
                                            (((class color) (background dark))
                                             (:background "#005588" :foreground "#DDEEFF"))))
                   (ediff-fine-diff-C . ((((class color) (background light))
                                          (:background "#EEFFFF" :foreground "#006699"))
                                         (((class color) (background dark))
                                          (:background "#006699" :foreground "#EEFFFF"))))))
    (let ((face (car entry))
          (spec (cdr entry)))
      (put face 'theme-face nil)
      (face-spec-set face spec)))


  (require 'magit) ;; Needed for all magit-* stuff below
  (dolist (face-map '(
                      ;; (diff-hl-insert              . magit-diff-added)
                      ;; (diff-hl-change              . ediff-current-diff-C)
                      ;; (diff-hl-delete              . magit-diff-removed)
                      ;; (smerge-base                 . magit-diff-base)
                      ;; (smerge-lower                . magit-diff-added)
                      ;; (smerge-markers              . magit-diff-conflict-heading)
                      ;; (smerge-refined-added        . magit-diff-added-highlight)
                      ;; (smerge-refined-removed      . magit-diff-removed-highlight)
                      ;; (smerge-upper                . magit-diff-removed)
                      (ediff-even-diff-A           . magit-diff-context-highlight)
                      (ediff-even-diff-Ancestor    . magit-diff-context)
                      (ediff-even-diff-B           . magit-diff-context-highlight)
                      (ediff-even-diff-C           . magit-diff-context-highlight)
                      (ediff-odd-diff-A            . magit-diff-context-highlight)
                      (ediff-odd-diff-Ancestor     . magit-diff-context)
                      (ediff-odd-diff-B            . magit-diff-context-highlight)
                      (ediff-odd-diff-C            . magit-diff-context-highlight)
                      (ediff-current-diff-A        . magit-diff-our)
                      (ediff-current-diff-Ancestor . magit-diff-base)
                      (ediff-current-diff-B        . magit-diff-their)
                      (ediff-fine-diff-A           . magit-diff-removed-highlight)
                      (ediff-fine-diff-Ancestor    . magit-diff-base-highlight)
                      (ediff-fine-diff-B           . magit-diff-added-highlight)
                      ;; (diff-header                 . magit-diff-hunk-heading)
                      ;; (diff-context                . magit-diff-context)
                      ;; (diff-added                  . magit-diff-added)
                      ;; (diff-removed                . magit-diff-removed)
                      ;; (diff-changed                . smerge-refined-changed)
                      ;; (diff-refine-added           . magit-diff-added-highlight)
                      ;; (diff-refine-removed         . magit-diff-removed-highlight)
                      ;; (diff-refine-changed         . ediff-fine-diff-C)
                      ;; (diff-indicator-added        . magit-diffstat-added)
                      ;; (diff-indicator-removed      . magit-diffstat-removed)
))
    (let* ((face (car face-map))
           (alias (cdr face-map)))
      (put face 'theme-face nil)
      (put face 'face-alias alias)))


 ;; This makes ediff usable with org mode
 (with-eval-after-load 'outline
   (add-hook 'ediff-prepare-buffer-hook #'outline-show-all))

#+end_src

** swift
#+begin_src emacs-lisp
(defun swift-up(&optional arg)
  (interactive)
  (or arg (setq arg 1))
  (dotimes (bind arg)

    (scroll-down-line)
    (previous-line)))

(defun swift-down(&optional arg)
  (interactive)
  (or arg (setq arg 1))
  (dotimes (bind arg)

    (scroll-up-line)
    (next-line)))

(defun swift-2-up()
  (interactive)
  (scroll-down-line)
  (previous-line)
  (scroll-down-line)
  (previous-line)
  )

(defun swift-2-down()
  (interactive)
  (scroll-up-line)
  (next-line)
  (scroll-up-line)
  (next-line)
  )

(define-key control-semi-map (kbd "C-f") 'toggle-swift-mode)
(bind-key* "M-SPC" 'toggle-swift-mode)

(defvar swift-command-map
  (let ((map (make-keymap)))
    ;; movement
    (define-key map (kbd "i") 'swift-2-up)
    (define-key map (kbd "k") 'swift-2-down)

    (define-key map (kbd "o") 'swift-up)
    (define-key map (kbd "l") 'swift-down)

    (define-key map (kbd "p") 'beginning-of-defun)
    (define-key map (kbd "n") 'end-of-defun)


    (define-key map (kbd "u") 'cua-scroll-down)
    (define-key map (kbd "j") 'cua-scroll-up)

    ;; cua mode
    (define-key map (kbd "C-z") 'toggle-swift-mode)
    (define-key map (kbd "C-x") 'kill-region)
    (define-key map (kbd "C-c") 'kill-ring-save)
    (define-key map (kbd "C-v") 'yank)

    (define-key map (kbd "q") 'toggle-swift-mode)
    (define-key map (kbd "w") 'toggle-swift-mode)
    (define-key map (kbd "e") 'toggle-swift-mode)
    (define-key map (kbd "r") 'toggle-swift-mode)
    (define-key map (kbd "t") 'toggle-swift-mode)
    (define-key map (kbd "y") 'toggle-swift-mode)


    (define-key map (kbd "[") 'toggle-swift-mode)
    (define-key map (kbd "]") 'toggle-swift-mode)
    (define-key map (kbd "a") 'toggle-swift-mode)
    (define-key map (kbd "s") 'toggle-swift-mode)
    (define-key map (kbd "d") 'toggle-swift-mode)
    (define-key map (kbd "f") 'toggle-swift-mode)
    (define-key map (kbd "g") 'toggle-swift-mode)
    (define-key map (kbd "h") 'toggle-swift-mode)

    (define-key map (kbd ";") 'toggle-swift-mode)
    (define-key map (kbd "'") 'toggle-swift-mode)
    (define-key map (kbd "#") 'toggle-swift-mode)
    (define-key map (kbd "b") 'toggle-swift-mode)
    (define-key map (kbd "m") 'toggle-swift-mode)
    (define-key map (kbd ",") 'toggle-swift-mode)
    (define-key map (kbd ".") 'toggle-swift-mode)
    (define-key map (kbd "/") 'toggle-swift-mode)
    map))

(define-minor-mode swift-mode
  "Toggle SWIFT buffer mode."
  ;; The initial value.
  :init-value nil
  ;; The indicator for the mode line.
  :lighter " SWIFT"
  ;; The minor mode bindings.
  :keymap swift-command-map)

(define-globalized-minor-mode global-swift-mode swift-mode
  swift-mode
  :init-value nil)


(defun toggle-swift-mode()
  (interactive)
  (if (eq global-swift-mode t)
      (progn
        ;; turning mode off
        (custom-set-faces '(cursor ((t (:background "OrangeRed")))))
        (custom-set-faces '(mode-line ((t (:background "#404040")))))
        (global-swift-mode -1)
        )

    (progn
      ;; turning mode off
      (custom-set-faces '(cursor ((t (:background "blue")))))
      (custom-set-faces '(mode-line ((t (:background "#333377")))))
      (global-swift-mode))))
#+end_src

** custom
#+begin_src emacs-lisp
(defun recompile-custom-packages ()
(interactive)
(byte-recompile-directory (expand-file-name "~/.emacs.d/custom-packages") 0))

(defun reload-emacs-config ()
(interactive)
(load-file "~/.emacs.d/init.el"))

(defun org-babel-reload-emacs-org()
(interactive)
(org-babel-load-file "~/.emacs.d/emacs.org"))


(defun emacs-init-time ()
  "Return a string giving the duration of the Emacs initialization."
  (interactive)
  (let ((str
     (format "%.2f seconds"
         (float-time
          (time-subtract after-init-time before-init-time)))))
    (if (called-interactively-p 'interactive)
        (message "%s" str)
      str)))

(defun display-startup-echo-area-message ()
  (message (concat "Emacs took " (emacs-init-time) " seconds to start.")))
#+end_src

** quick open hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-quickopen (:color blue)
  "
[_t_] ~/notes/temp
[_c_] ~/.emacs.d/emacs.org
[_;_] org rifle
[_l_] dired ~/.emacs.d
"
  ("t" (lambda ()
         (interactive)
         (find-file "~/emacs-temp")) nil)
  ("c" (lambda ()
         (interactive)
         (find-file "~/.emacs.d/emacs.org")) nil)
  (";" helm-org-rifle-important nil)
  ("l" (lambda ()
         (interactive)
         (progn
           (zygospore-toggle-delete-other-windows)
           (dired "~/org-notes")
           (helm-find-files-1 default-directory))) nil))
#+END_SRC

** diminish
#+begin_src emacs-lisp
(require 'diminish)
(diminish 'anzu-mode)
(diminish 'gcmh-mode)
(diminish 'projectile-mode)
(diminish 'company-mode)
(diminish 'yas-minor-mode)
#+end_src
** tags
#+begin_src emacs-lisp
;; This should prevent Emacs from asking "Keep current list of tags tables also?"
(setq tags-add-tables nil)

;; Prevent ggtags mode from displaying project name in mode line.
;; Projectile already displays this information.
(setq ggtags-mode-line-project-name nil)
#+end_src
** LSP
#+begin_src emacs-lisp

(defun global-disable-mode (mode-fn)
  "Disable `MODE-FN' in ALL buffers."
  (interactive "a")
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (funcall mode-fn -1))))


(defun disable-lsp-in-all-buffers ()
(interactive "a")
(global-disable-mode lsp-mode)
)


(require 'lsp)
;; (add-hook 'c++-mode-hook 'lsp)
#+end_src

** parens
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

** semantic
#+BEGIN_SRC emacs-lisp
(semantic-mode t)
#+END_SRC
* ALIAS
#+begin_src emacs-lisp
(message "emacs.org : starting alias stage")
#+end_src
#+begin_src emacs-lisp

;;Too lazy for this
(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'describe-bindings 'helm-descbinds)

(defalias 'rel 'reload-emacs-config)
(defalias 'lp 'list-packages)
(defalias 'hlp 'helm-list-elisp-packages-no-fetch)
(defalias 'igf 'igrep-find)
(defalias 'msf 'menu-set-font)
(defalias 'obr 'org-babel-reload-emacs-org)

(message "emacs.org : done loading!")
#+end_src
