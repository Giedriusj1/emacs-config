#+TITLE: Emacs config

* INIT BASICS
#+begin_src emacs-lisp
(message "emacs.org : starting init stage")

;; Increase garbage collector threshold for better performance
(setq gc-cons-threshold (* 5 gc-cons-threshold))

(require 'package)
(require 'cl)

(add-to-list 'load-path "~/.emacs.d/elpa")
(add-to-list 'load-path "~/.emacs.d/custom-packages")
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; not needed since emacs 27
(when (not package--initialized) (package-initialize) )
#+end_src

* PACKAGES
#+begin_src emacs-lisp
(message "emacs.org : package fetching stage")
(setq url-http-attempt-keepalives nil)

(defvar package-list
  '(
    ag
    ;; company
    ggtags
    haskell-mode
    helm
    helm-ag
    helm-c-yasnippet
    helm-descbinds
    helm-projectile
    helm-swoop
    hydra
    key-chord ;; Currently only used when dealing with terminals.
    magit
    projectile
    smart-mode-line
    swiper
    swiper-helm
    yasnippet
    yasnippet-snippets
    )
)

(defun packages-installed ()
  (loop for p in package-list
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(unless (packages-installed)
  (package-refresh-contents)

  (dolist (p package-list)
    (when (not (package-installed-p p))
      (package-install p))))

#+end_src

* LOOKS
#+begin_src emacs-lisp
(message "emacs.org : starting looks stage")
#+end_src
** themes and colours
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'scroll-bar-mode nil)
(customize-set-variable 'horizontal-scroll-bar-mode nil)
(customize-set-variable 'menu-bar-mode nil)
(customize-set-variable 'tool-bar-mode nil)

(custom-set-variables
 '(custom-safe-themes
   (quote
	("a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e"
	 "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" default)))
 )

;; Terminal displays are often not happy about certain colours, so we only set them if we are running
;; within a graphic display environment
(if (display-graphic-p)
    (progn

      (custom-set-variables
       '(custom-enabled-themes (quote (wombat)))
       )

      (custom-set-faces
       '(default ((t (:background "#101515"))))
       '(cursor ((t (:background "OrangeRed"))))
       '(mode-line-inactive ((t (:background "#101010"))))
       '(mode-line ((t (:background "#404040"))))
       '(hl-line ((t (:inherit nil :background "#222222"))))
       '(minibuffer-prompt ((t (:foreground "#ff584d"))))

       ;; Make some default wombat colours a bit more lively
       '(font-lock-builtin-face ((((class color) (min-colors 89)) (:foreground "#ff685d"))))
       '(font-lock-constant-face ((((class color) (min-colors 89)) (:foreground "#ff685d"))))

       ;; Some default helm faces are quite ugly... let's fix em up.
       '(helm-selection ((t (:background "grey24" :distant-foreground "black"))))
       '(helm-buffer-directory ((t (:weight bold :foreground "LightSlateBlue" :distant-foreground "black"))))
       '(helm-ff-directory ((t :inherit helm-buffer-directory )))
       '(helm-source-header ((t (:background "#450a6b" :foreground "#dddddd" :weight bold :height 1.3 :family "Sans Serif"))))
       )

      (cond
       ((string-equal system-type "windows-nt")
        (cond
         ((member "ProggyClean" (font-family-list))
          (set-frame-font "ProggyClean"))
         ((member "Consolas-10" (font-family-list))
          (set-frame-font "Consolas-10"))))
       ((string-equal system-type "gnu/linux")
        (set-frame-font "Monospace-10")))

      (global-hl-line-mode t)

      ))


(sml/setup)

#+END_SRC

** Buffer names
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

** fringe
#+BEGIN_SRC emacs-lisp
;; (fringe-mode '(4 . 8)) ;; make left fringe half size
#+END_SRC

* BEHAVIOUR
#+begin_src emacs-lisp
(message "emacs.org : starting behaviour stage")
#+end_src
** Keyboard
*** maps
#+begin_src emacs-lisp
(define-prefix-command 'control-semi-map)
(define-prefix-command 'tab-map)

(require 'bind-key)
(bind-key* "C-;" 'control-semi-map)

(if (display-graphic-p)
    ()
    (progn
    (require 'key-chord)
    (key-chord-mode 1)
    (key-chord-define-global ";;" 'control-semi-map)
))

(bind-key* "<tab>" 'tab-map)
(bind-key* "M-;" 'tab-map)
#+end_src

*** global map
#+begin_src emacs-lisp
(global-set-key [f11] 'toggle-truncate-lines)
(global-set-key [f12] 'whitespace-mode)

(global-set-key (kbd "C-<f11>") 'toggle-frame-fullscreen)

(global-set-key (kbd "<Scroll_Lock>") 'scroll-lock-mode)
(global-set-key (kbd "<up>") 'scroll-down-line)
(global-set-key (kbd "<down>") 'scroll-up-line)

(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)


(bind-key* "M-," 'backward-kill-word)
(bind-key* "M-." 'kill-word)

(global-set-key (kbd "M-,") 'backward-kill-word)
(global-set-key (kbd "<down>") 'scroll-up-line)

(global-set-key (kbd "C-d") 'global-superword-mode)
(global-set-key (kbd "C-M-SPC") 'rectangle-mark-mode)

(bind-key* "C-," 'delete-backward-char)
(bind-key* "C-." 'delete-char)

(bind-key* "M-h" 'open-line)

(bind-key* "C-u" 'backward-char)
(bind-key* "C-o" 'forward-char)

(bind-key* "M-u" 'backward-word)
(bind-key* "M-o" 'forward-word)

(bind-key* "C-M-u" 'backward-sexp)
(bind-key* "C-M-o" 'forward-sexp)

(bind-key* "C-d" 'Control-X-prefix)
(bind-key* "C-a" 'Control-X-prefix)

(bind-key* "C-q" 'beginning-of-line)
(bind-key* "C-w" 'back-to-indentation)
#+end_src

*** ctl-x-map
#+begin_src emacs-lisp
(define-key ctl-x-map "\C-f" 'helm-find-files)
(define-key ctl-x-map "\C-d" (lambda ()
                               (interactive)
                               (dired default-directory)))
#+end_src
*** control-semi-map
#+begin_src emacs-lisp
(define-key control-semi-map (kbd "SPC") 'point-to-register)
(define-key control-semi-map (kbd "C-SPC") 'point-to-register)
(define-key control-semi-map (kbd "j") 'jump-to-register)
(define-key control-semi-map (kbd "h") 'highlight-phrase)
(define-key control-semi-map (kbd "q") 'goto-line)

(define-key control-semi-map (kbd "C-j") 'jump-to-register)
(define-key control-semi-map (kbd "C-q") 'goto-line)
(define-key control-semi-map (kbd "C-l") 'execute-extended-command)
(define-key control-semi-map (kbd "C-1") 'zygospore-toggle-delete-other-windows)
(define-key control-semi-map (kbd "C-2") 'split-window-below)
(define-key control-semi-map (kbd "C-3") 'split-window-right)
(define-key control-semi-map (kbd "C-0") 'delete-window)
(define-key control-semi-map (kbd "C-4") 'balance-windows)

(define-key control-semi-map (kbd "C-d") 'follow-mode)
#+end_src
*** tab map
#+begin_src emacs-lisp
(define-key tab-map (kbd "TAB") 'comment-dwim)
(define-key tab-map (kbd "M-;") 'comment-dwim)
(define-key tab-map (kbd "u") 'universal-argument)
#+end_src

** anzu
#+BEGIN_SRC emacs-lisp
;; Show number of matches in mode-line while searching
(require 'anzu)
(global-anzu-mode t)
#+END_SRC

** isearch+
#+BEGIN_SRC emacs-lisp
(eval-after-load "isearch" '(require 'isearch+))
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
(require 'hydra)

(defun spawn-local-mode-hydra ()
  (interactive)
  (cond
   (( string= "org-mode" major-mode)
    (hydra-tab-org/body))
   (( string= "c-mode" major-mode)
    (hydra-c/body))
   (( string= "c++-mode" major-mode)
    (hydra-c/body))
   (( string= "python-mode" major-mode)
    (hydra-python/body))
   (t (message "Argh...hydra for your current mode does not exist :("))))

(define-key tab-map (kbd "j") 'spawn-local-mode-hydra)
(define-key tab-map (kbd "m") 'hydra-magit/body)
(define-key tab-map (kbd "p") 'hydra-projectile/body)
(define-key tab-map (kbd ";") 'hydra-quickopen/body)

(define-key tab-map (kbd "o") 'hydra-search-helper/body)

(defhydra hydra-search-helper (:color blue)
 "
[_o_] find gtag
 "
  ("o" ggtags-find-tag-dwim nil)
  )

#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(projectile-global-mode t)

(defcustom helm-source-projectile-projects-actions2
  (helm-make-actions
   "Open Dired in project's directory `C-d'" #'dired
   "Switch to project" (lambda (project)
                         (let ((projectile-completion-system 'helm))
                           (projectile-switch-project-by-name project)))
   "Open project root in vc-dir or magit `M-g'" #'helm-projectile-vc
   "Switch to Eshell `M-e'" #'helm-projectile-switch-to-eshell
   "Grep in projects `C-s'" #'helm-projectile-grep
   "Compile project `M-c'. With C-u, new compile command" #'helm-projectile-compile-project
   "Remove project(s) from project list `M-D'" #'helm-projectile-remove-known-project)
  "Actions for `helm-source-projectile-projects'."
  :group 'helm-projectile
  :type '(alist :key-type string :value-type function))

(defvar helm-source-projectile-projects2
  (helm-build-sync-source "Projectile projects"
    :candidates (lambda () (with-helm-current-buffer projectile-known-projects))
    :fuzzy-match helm-projectile-fuzzy-match
    :keymap helm-projectile-projects-map
    :mode-line helm-read-file-name-mode-line-string
    :action 'helm-source-projectile-projects-actions2)
  "Helm source for known projectile projects.")



(defun helm-projectile-projects ()
  (interactive)
  (let ((helm-ff-transformer-show-only-basename nil))
    (helm :sources '(helm-source-projectile-projects2)
          :buffer "*helm projectile projects*"
          :truncate-lines helm-projectile-truncate-lines)))

(defhydra hydra-projectile (:color blue)
  "projectile"
  ("g" helm-projectile-grep "grep")
  ("m" helm-projectile-ag "ag")
  ("j" helm-projectile "helm files")
  ("d" projectile-dired "dired")
  ("p" helm-projectile-projects "projects")
  )
#+END_SRC

** cua-mode
#+begin_src emacs-lisp
(cua-mode 1)
(bind-key "C-f" 'cua-exchange-point-and-mark)

;; (bind-key* "C-c" 'kill-ring-save)
(bind-key* "C-v" 'yank)
#+end_src

** recentf
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 100)
(setq recentf-max-saved-items 100)
#+end_src

** windmove + frame selection
#+begin_src emacs-lisp
(require 'zygospore)

(setq windmove-wrap-around t )
(bind-key* "C-1" 'window-swap-states)
(bind-key* "C-2" 'windmove-up)
(bind-key* "C-3" 'windmove-right)

(bind-key* "C-5" 'other-frame)
#+end_src

** shell
#+begin_src emacs-lisp
(bind-key* "C-`" 'shell)
#+end_src

** dired
#+begin_src emacs-lisp
  (require 'dired)
  (require 'dired-extension)

  (setq dired-dwim-target t)

  (define-key dired-mode-map (kbd "l") 'dired-up-directory)
  (define-key dired-mode-map (kbd "r") 'dired-do-redisplay)

  (setq dired-listing-switches "-alFh")

  ;; Taken from: https://github.com/aculich/.emacs.d/blob/master/init.el
  (when (or (memq system-type '(gnu gnu/linux))
	    (string= (file-name-nondirectory insert-directory-program) "gls"))
    ;; If we are on a GNU system or have GNU ls, add some more `ls' switches:
    ;; `--group-directories-first' lists directories before files, and `-v'
    ;; sorts numbers in file names naturally, i.e. "image1" goes before
    ;; "image02"
    (setq dired-listing-switches
	  (concat dired-listing-switches " --group-directories-first -v")))


  (defun open-in-external-app ()
    "Open the current file or dired marked files in external app."
    (interactive)
    (let ( doIt
	   (myFileList
	    (cond
	     ((string-equal major-mode "dired-mode") (dired-get-marked-files))
	     (t (list (buffer-file-name))) ) ) )

      (setq doIt (if (<= (length myFileList) 5)
		     t
		   (y-or-n-p "Open more than 5 files?") ) )

      (when doIt
	(cond
	 ((string-equal system-type "windows-nt")
	  (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList)
	  )
	 ((string-equal system-type "darwin")
	  (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList) )
	 ((string-equal system-type "gnu/linux")
	  (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList) ) ) ) ) )

#+end_src

** company
#+begin_src emacs-lisp
;; (require 'company)
;; (global-company-mode t)

;; (add-to-list 'company-backends '(company-dabbrev))

;; (define-key company-active-map (kbd "C-n") #'company-select-next)
;; (define-key company-active-map (kbd "C-p") #'company-select-previous)

;; (define-key control-semi-map (kbd "n") 'company-complete)
;; (define-key control-semi-map (kbd "C-n") 'dabbrev-expand)

#+end_src

** ORG mode
#+BEGIN_SRC emacs-lisp
(defhydra hydra-tab-org (:color blue)
  "
 [_o_]   metaright   [_u_]   metaleft  [_n_]   metaup  [_p_]   metadown
 [_C-o_] shiftright  [_C-u_] shiftleft [_C-n_] shiftup [_C-p_] shiftdown
 [_e_]   edit source [_s_] exit source edit buffer
  "

  ( "o" org-metaright nil)
  ( "u" org-metaleft nil)
  ( "p" org-metaup nil)
  ( "n" org-metadown nil)

  ( "C-o" org-shiftright nil)
  ( "C-u" org-shiftleft nil)
  ( "C-p" org-shiftup nil)
  ( "C-n" org-shiftdown nil)

  ( "e" org-edit-src-code nil)
  ( "s" org-edit-src-exit nil)
  )

(setq org-src-fontify-natively t)
(setq org-src-preserve-indentation t)
(setq org-startup-indented t)
(setq org-startup-truncated nil)
(setq org-export-with-toc nil)
(setq org-hierarchical-todo-statistics nil)

#+END_SRC
** winner mode
#+begin_src emacs-lisp
(winner-mode 1)
(define-key control-semi-map (kbd "C-u") 'winner-undo)
(define-key control-semi-map (kbd "C-o") 'winner-redo)
#+end_src

** Misc behaviour
#+begin_src emacs-lisp
(setq redisplay-dont-pause t)
(setq debug-on-error nil)
(setq inhibit-splash-screen t)
(setq initial-scratch-message "")
(setq column-number-mode t)
(setq history-length 25)
(setq select-enable-clipboard t) ;; Merge OS and Emacs' clipboards

;; We'll ask emacs to put all customizations made via it's customize package in a
;; separate file... so we can ignore it later :)
(setq custom-file (concat user-emacs-directory "/custom--ignored.el"))

;; Let's garbage collect when focusing out of the window.
(add-hook 'focus-out-hook #'garbage-collect)

(blink-cursor-mode -1)
(require 'auto-highlight-symbol)
(global-auto-highlight-symbol-mode 1)
(delete-selection-mode 1)
(show-paren-mode t)

;; Semantic currently fails to populate imenu when editing certain .c files (ahem, linux kernel).
;; I should probably investigate why that fails.
(semantic-mode t)

(which-function-mode 1)
(custom-set-faces '(which-func ((t (:foreground "LightSlateBlue")))))

(customize-set-variable 'electric-pair-mode t)
(customize-set-variable 'bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks" )

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups

(defun my-create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)

#+end_src

** Programming
*** indent modes
#+begin_src emacs-lisp
(setq-default c-basic-offset 4 c-default-style "linux")
(setq-default tab-width 4 indent-tabs-mode t)
#+end_src

*** C/C++ common
#+begin_src emacs-lisp
(defhydra hydra-c (:color blue)
  ( "c" helm-yas-complete "helm yas complete")
  )

(add-hook 'c-mode-common-hook
		  (lambda()
			;; Automagically adds spaces between symbols like + > < etc...
			(electric-spacing-mode t)))
#+end_src

*** Python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
      (lambda()
         (setq indent-tabs-mode nil)
         (setq python-indent 4)
         (setq tab-width 4)))

(defhydra hydra-python (:color blue)
  ( "c" helm-yas-complete "helm yas complete")
  )

#+end_src

*** Scheme
#+begin_src emacs-lisp
(add-hook 'scheme-mode-hook
      (lambda()
         (setq indent-tabs-mode nil)))
#+end_src
** gdb
#+begin_src emacs-lisp
(define-key tab-map (kbd "h") 'hydra-gdb-helper/body)

(defhydra hydra-gdb-helper (:color blue)
  ( "j" gdb-restore-windows "restore gdb windows")
  )
#+end_src
** Mode recognition
#+begin_src emacs-lisp
(setq auto-mode-alist
      '(
        ("\\.org$" . org-mode)
        ("\\.org.gpg$" . org-mode)
        ("\\.ref$" . org-mode)
        ("\\.ref.gpg$" . org-mode)
        ("\\.notes$" . org-mode)
        ("\\.pdf\\'" . doc-view-mode)

        ;;programming modes
        ("\\.hs$" . haskell-mode)
        ("\\.py\\'" . python-mode)
        ("\\.c\\'" . c-mode)
        ("\\.cpp\\'" . c++-mode)
        ("\\.h\\'" . c++-mode)
        ("\\.java\\'" . java-mode)
        ("\\.s\\'" . c++-mode)
        ("\\.mc\\'" . c++-mode)
        ("\\.el\\'" . emacs-lisp-mode)
        ("\\.scm\\'" . scheme-mode)
        ))
#+end_src

** yas
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
** Helm
#+begin_src emacs-lisp
(require 'helm-config)

(global-set-key (kbd "C-j") 'helm-mini)
(define-key org-mode-map (kbd "C-j") 'helm-mini)
(define-key lisp-interaction-mode-map (kbd "C-j") 'helm-mini)

(define-key control-semi-map (kbd "C-s") 'helm-semantic-or-imenu)

(define-key control-semi-map (kbd "l") 'helm-M-x)
(define-key control-semi-map (kbd "o") 'swiper-helm)
(define-key control-semi-map (kbd "C-;") 'swiper-helm)

(define-key control-semi-map (kbd "r") 'helm-mark-ring)
(define-key control-semi-map (kbd "C-r") 'helm-global-mark-ring)

(define-key control-semi-map (kbd "b") 'helm-resume)
(define-key control-semi-map (kbd "C-b") 'helm-resume)

(define-key control-semi-map (kbd "C-m") 'helm-swoop)
(define-key control-semi-map (kbd "m") 'helm-multi-swoop-all)
#+end_src
** magit
#+begin_src emacs-lisp
(defhydra hydra-magit (:color blue)
  "magit"
  ("m" magit-status "status")
  ("p" magit-pull "pull")
  ("P" magit-push "push")
  ("c" magit-commit "commit")
  ("l" magit-log "log")
  ("d" magit-diff-dwim "diff-dwim")
  ("D" magit-diff "diff-dwim")
  )

#+end_src
** swift
#+begin_src emacs-lisp
(defface hi-space
  '((((background dark)) (:background "#202525" :foreground "black"))
    (t (:background "pink")))
  "Face for hi-lock mode."
  )

(defun hl ()
  (interactive)
  (highlight-regexp "^[ \t]+" 'hi-space)
  )

(defun un-hl()
  (interactive)
  (unhighlight-regexp "^[ \t]+")
  )


(defun swift-up()
  (interactive)
  (scroll-down-line)
  (previous-line)
  )

(defun swift-down()
  (interactive)
  (scroll-up-line)
  (next-line)
  )

(defun swift-2-up()
  (interactive)
  (scroll-down-line)
  (previous-line)
  (scroll-down-line)
  (previous-line)
  )

(defun swift-2-down()
  (interactive)
  (scroll-up-line)
  (next-line)
  (scroll-up-line)
  (next-line)
  )


(define-key control-semi-map (kbd "C-f") 'toggle-swift-mode)

(defvar swift-command-map
  (let ((map (make-keymap)))
    ;; movement
    (define-key map (kbd "i") 'swift-2-up)
    (define-key map (kbd "k") 'swift-2-down)

    (define-key map (kbd "o") 'swift-up)
    (define-key map (kbd "l") 'swift-down)

    (define-key map (kbd "p") 'beginning-of-defun)
    (define-key map (kbd "n") 'end-of-defun)



    (define-key map (kbd "u") 'cua-scroll-down)
    (define-key map (kbd "j") 'cua-scroll-up)

    ;; cua mode
    (define-key map (kbd "C-z") 'toggle-swift-mode)
    (define-key map (kbd "C-x") 'kill-region)
    (define-key map (kbd "C-c") 'kill-ring-save)
    (define-key map (kbd "C-v") 'yank)

    (define-key map (kbd "q") 'toggle-swift-mode)
    (define-key map (kbd "w") 'toggle-swift-mode)
    (define-key map (kbd "e") 'toggle-swift-mode)
    (define-key map (kbd "r") 'toggle-swift-mode)
    (define-key map (kbd "t") 'toggle-swift-mode)
    (define-key map (kbd "y") 'toggle-swift-mode)


    (define-key map (kbd "[") 'toggle-swift-mode)
    (define-key map (kbd "]") 'toggle-swift-mode)
    (define-key map (kbd "a") 'toggle-swift-mode)
    (define-key map (kbd "s") 'toggle-swift-mode)
    (define-key map (kbd "d") 'toggle-swift-mode)
    (define-key map (kbd "f") 'toggle-swift-mode)
    (define-key map (kbd "g") 'toggle-swift-mode)
    (define-key map (kbd "h") 'toggle-swift-mode)

    (define-key map (kbd ";") 'toggle-swift-mode)
    (define-key map (kbd "'") 'toggle-swift-mode)
    (define-key map (kbd "#") 'toggle-swift-mode)
    (define-key map (kbd "b") 'toggle-swift-mode)
    (define-key map (kbd "m") 'toggle-swift-mode)
    (define-key map (kbd ",") 'toggle-swift-mode)
    (define-key map (kbd ".") 'toggle-swift-mode)
    (define-key map (kbd "/") 'toggle-swift-mode)
    map))

(define-minor-mode swift-mode
  "Toggle SWIFT buffer mode."
  ;; The initial value.
  :init-value nil
  ;; The indicator for the mode line.
  :lighter " SWIFT"
  ;; The minor mode bindings.
  :keymap swift-command-map)

(define-globalized-minor-mode global-swift-mode swift-mode
  swift-mode
  :init-value nil)


(defun toggle-swift-mode()
  (interactive)
  (if (eq global-swift-mode t)
      (progn
        ;; turning mode off
        (custom-set-faces '(cursor ((t (:background "OrangeRed")))))
        (custom-set-faces '(mode-line ((t (:background "#404040")))))
        (global-swift-mode -1)
        )

    (progn
      ;; turning mode off
      (custom-set-faces '(cursor ((t (:background "blue")))))
      (custom-set-faces '(mode-line ((t (:background "#333377")))))
      (global-swift-mode)
      )
    )
  )
#+end_src
** custom
#+begin_src emacs-lisp

(defun reload-emacs-config ()
(interactive)
(load-file "~/.emacs"))

(defun org-babel-reload-emacs-org()
(interactive)
(org-babel-load-file "~/.emacs.d/emacs.org"))


(defun emacs-init-time ()
  "Return a string giving the duration of the Emacs initialization."
  (interactive)
  (let ((str
     (format "%.2f seconds"
         (float-time
          (time-subtract after-init-time before-init-time)))))
    (if (called-interactively-p 'interactive)
        (message "%s" str)
      str)))

(defun display-startup-echo-area-message ()
  (message (concat "Emacs took " (emacs-init-time) " seconds to start.")))
#+end_src

** quick open hydra
#+BEGIN_SRC emacs-lisp

(defun qo-emacs-org ()
(interactive)
(find-file "~/.emacs.d/emacs.org")
)

(defun qo-notes-org ()
(interactive)
(find-file "~/notes/notes.org")
)

(defun qo-notes-prog-org ()
(interactive)
(find-file "~/notes/programming.org")
)

(defun qo-temp ()
(interactive)
(find-file "~/notes/temp")
)


(defhydra hydra-quickopen-notes (:color blue)
"
[_n_] ~/notes/notes.org
[_p_] ~/notes/programming.org
"
("n" qo-notes-org nil)
("p" qo-notes-prog-org nil)
)


(defhydra hydra-quickopen (:color blue)
"
[_t_] ~/notes/temp
[_c_] ~/.emacs.d/emacs.org
[_n_] NOTES
"
("t" qo-temp nil)
("n" hydra-quickopen-notes/body nil)
("c" qo-emacs-org nil)
)

#+END_SRC

** diminish
#+begin_src emacs-lisp
(require 'diminish)
(diminish 'anzu-mode)
#+end_src
** tags
#+begin_src emacs-lisp
;; This should prevent Emacs from asking "Keep current list of tags tables also?"
(setq tags-add-tables nil)
#+end_src

* ALIAS
#+begin_src emacs-lisp
(message "emacs.org : starting alias stage")
#+end_src
#+begin_src emacs-lisp

;;Too lazy for this
(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'describe-bindings 'helm-descbinds)

(defalias 'rel 'reload-emacs-config)
(defalias 'lp 'paradox-list-packages)
(defalias 'hlp 'helm-list-elisp-packages-no-fetch)
(defalias 'igf 'igrep-find)
(defalias 'msf 'menu-set-font)
(defalias 'obr 'org-babel-reload-emacs-org)

(message "emacs.org : done loading!")
#+end_src
