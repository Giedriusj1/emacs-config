#+TITLE: Emacs config

* INIT BASICS                                                 :config:basics:
** repo load
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/")
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("malade" . "http://marmalade-repo.org/packages/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")))


;; update list of available packages: this should be changed
  (package-refresh-contents)

;; check if the packages are installed: if not, install them with ELPA...
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (package-install package)))
 '(yasnippet
   igrep
   magit
   highline
   rainbow-mode
   lua-mode
   smooth-scrolling
   elpy
   auctex
   emacs-eclim
   ace-jump-mode
   auto-install
   auto-complete-clang
   helm
   helm-swoop
   bind-key
   icicles
   projectile
   auto-complete-c-headers
   powerline
   icomplete+
   ace-jump-mode
   dired+
   auto-complete
   ac-dabbrev
   isearch+
   smooth-scroll
   flymake-haskell-multi
   key-chord
   yasnippet
   all-ext
   )
 )
#+end_src

** Keyboard
*** maps
#+begin_src emacs-lisp
(define-prefix-command 'alt-semi-map)
(define-prefix-command 'control-semi-map)
(define-prefix-command 'tab-map)
(define-prefix-command 'ret-map)
(define-prefix-command 'hyper-semi-map)
(define-prefix-command 'meta-semi-map)

(require 'bind-key)
(bind-key* "C-;" 'control-semi-map)
(bind-key* "H-;" 'hyper-semi-map)
(bind-key* "M-;" 'meta-semi-map)
(bind-key* "<tab>" 'tab-map)

(global-set-key (kbd "C-d") 'delete-backward-char)

(bind-key* "C-h" 'delete-backward-char)
(bind-key* "C-j" 'delete-forward-char)

(bind-key* "C-z" (message ""))
(bind-key* "C-u" 'backward-kill-word)

#+end_src

*** global map
#+begin_src emacs-lisp
(global-set-key [f11] 'toggle-truncate-lines)
(global-set-key [f12] 'whitespace-mode)

(global-set-key (kbd "<Scroll_Lock>") 'scroll-lock-mode)
(global-set-key (kbd "<up>") 'scroll-down-line)
(global-set-key (kbd "<down>") 'scroll-up-line)

(global-set-key (kbd "M-,") 'beginning-of-buffer)
(global-set-key (kbd "M-.") 'end-of-buffer)

(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

(global-set-key (kbd "M-o") 'other-window)
#+end_src

**** Hyper key
#+begin_src emacs-lisp
(global-set-key (kbd "H-M-j") 'next-multiframe-window)
(global-set-key (kbd "H-M-k") 'previous-multiframe-window)
(global-set-key (kbd "H-M-c") 'delete-window)
(global-set-key (kbd "H-j") 'backward-delete-char-untabify)
(global-set-key (kbd "H-k") 'delete-forward-char)

(global-set-key (kbd "H-1") 'delete-other-windows)
(global-set-key (kbd "H-2") 'split-window-below)
(global-set-key (kbd "H-3") 'split-window-right)
(global-set-key (kbd "H-0") 'delete-window)
(global-set-key (kbd "H-e") 'execute-extended-command)

(global-set-key (kbd "H-o") 'other-window)
(global-set-key (kbd "H-f") 'backward-delete-char-untabify)
(global-set-key (kbd "H-j") 'delete-char)

(global-set-key (kbd "H-h") 'backward-kill-word)
(global-set-key (kbd "H-l") 'kill-word)
#+end_src

*** control-semi-map 
#+begin_src emacs-lisp
(define-key control-semi-map (kbd "SPC") 'point-to-register)
(define-key control-semi-map (kbd "C-SPC") 'point-to-register)
(define-key control-semi-map (kbd "j") 'jump-to-register)
(define-key control-semi-map (kbd "C-j") 'jump-to-register)
(define-key control-semi-map (kbd "h") 'highlight-phrase)
(define-key control-semi-map (kbd "C-h") 'highlight-phrase)
(define-key control-semi-map (kbd "M-h") 'highlight-phrase)
(define-key control-semi-map (kbd "C-M-h") 'highlight-phrase)
(define-key control-semi-map (kbd "C-w") 'window-configuration-to-register)

(define-key control-semi-map (kbd "q") 'goto-line)
(define-key control-semi-map (kbd "C-q") 'goto-line)

(define-key control-semi-map (kbd "C-l") 'execute-extended-command)
#+end_src

*** tab map
#+begin_src emacs-lisp


(define-key tab-map (kbd "TAB") 'comment-dwim)
  (define-key tab-map (kbd "u") 'universal-argument)

(define-key tab-map (kbd "1") 'ace-jump-char-mode)
(define-key tab-map (kbd "2") 'ace-jump-line-mode)

(define-key tab-map (kbd "p") 'projectile-command-map)
(define-key tab-map (kbd "m") 'magit-command-map)

(define-key tab-map (kbd "f") 'flyspell-mode)
#+end_src

* LOOKS                                                       :config::looks:
** themes and colours
#+BEGIN_SRC emacs-lisp
(highline-mode 1)

(custom-set-variables
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(custom-enabled-themes (quote (wombat)))
 '(directory-free-space-args "-Pkh")
 '(electric-pair-mode t)
 '(fci-rule-color "#BBBBBB")
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(send-mail-function (quote sendmail-send-it))
 '(tool-bar-mode nil)
 (custom-set-faces
  '(highline-face ((t (:background "#303030"))))
  )
 )

;; Loading font based on platform
(cond
 ((string-equal system-type "windows-nt")
  (set-frame-font "Consolas-10"))
 ((string-equal system-type "darwin")
  (message "what?"))
 ((string-equal system-type "gnu/linux")
  (set-frame-font "Monospace-10"))
)
#+END_SRC

** Buffer names
   Setup uniquify so that non-unique buffer names get the parent path
   included to make them unique.
   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
   #+END_SRC
** Mode line
#+NAME: look-and-feel
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(set-face-attribute 'mode-line nil
                    :foreground "grey90"
                    :background "DarkOrange3"
                    :box nil)

(set-face-attribute 'mode-line-inactive nil
                    :box nil)

(setq powerline-arrow-shape 'arrow14)
(powerline-center-theme)
#+END_SRC

* BEHAVIOUR                                                :config:behaviour:
** projectile
#+begin_src emacs-lisp
(projectile-global-mode 1)
#+end_src

** icicles
#+begin_src emacs-lisp
(icy-mode 1)
#+end_src
** ido
#+begin_src emacs-lisp
(ido-mode 1)
#+end_src

** icomplete+
#+begin_src emacs-lisp
(icomplete-mode 1)
(require 'icomplete+)
#+end_src

** ace-jump
#+begin_src emacs-lisp
(require 'ace-jump-mode)
(global-set-key (kbd "M-SPC") 'ace-jump-mode)
#+end_src

** dired+
#+begin_src emacs-lisp
(require 'dired+)
(setq dired-dwim-target t)

(define-key ctl-x-map   "d" 'diredp-dired-files)
(define-key ctl-x-4-map "d" 'diredp-dired-files-other-window)

(setq dired-listing-switches "-alk")


(defun open-in-external-app ()
  "Open the current file or dired marked files in external app."
  (interactive)
  (let ( doIt
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           (t (list (buffer-file-name))) ) ) )

    (setq doIt (if (<= (length myFileList) 5)
                   t
                 (y-or-n-p "Open more than 5 files?") ) )

    (when doIt
      (cond
       ((string-equal system-type "windows-nt")
        (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList)
        )
       ((string-equal system-type "darwin")
        (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList) )
       ((string-equal system-type "gnu/linux")
        (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList) ) ) ) ) )

;; quick access to home dir
(global-set-key (kbd "S-<f1>") ;;Shift-f1 opens dired home folder
		(lambda ()
		  (interactive)
		  (diredp-dired-files "~/")))
#+end_src

** Auto complete
#+begin_src emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)


(define-key control-semi-map (kbd "n") 'auto-complete)
(define-key control-semi-map (kbd "C-n") 'dabbrev-expand)

(global-auto-complete-mode t)
(setq ac-use-quick-help nil)
(setq ac-auto-show-menu nil)

(define-key ac-menu-map "\C-n" 'ac-next)
(define-key ac-menu-map "\C-p" 'ac-previous)

(setq
      ac-auto-show-menu nil
      ac-candidate-limit nil
      ac-delay 20
      ac-disable-faces (quote (font-lock-comment-face font-lock-doc-face))
      ac-ignore-case 'smart
      ac-menu-height 15
      ac-quick-help-delay 1.5
      ac-quick-help-prefer-pos-tip t
      ac-use-quick-help t
)

(defun auto-complete-mode-maybe ()
"AC in all modes"
  (unless (minibufferp (current-buffer))
    (auto-complete-mode 1)))


(require 'ac-dabbrev)
(setq-default ac-sources '(ac-source-dabbrev ac-source-semantic ac-source-semantic-raw))
#+end_src

** Buffer management
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'bs-show)
#+end_src

** ORG mode

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-preserve-indentation t)
(setq org-startup-indented t)
(setq org-startup-truncated nil)


(setq org-export-with-toc nil)
(define-key control-semi-map (kbd "M-e") 'org-export)

#+END_SRC
** Misc behaviour

#+begin_src emacs-lisp
(setq column-number-mode 't)

(delete-selection-mode 1)

(delete-selection-mode 1)
(show-paren-mode t)

(setq inhibit-splash-screen t)
(desktop-save-mode t)
(semantic-mode)
(setq indent-tabs-mode nil)

(eval-after-load "isearch" '(require 'isearch+))

(winner-mode 1)
(global-set-key (kbd "s-[") 'winner-undo)
(global-set-key (kbd "s-]") 'winner-redo)

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
#+end_src

** Scrolling behavior
   #+BEGIN_SRC emacs-lisp
   (require 'smooth-scroll)
   (smooth-scroll-mode 1)
   #+END_SRC

** Programming                                :config:behaviour:programming:
*** Haskell
#+begin_src emacs-lisp
(require 'flymake-haskell-multi)
(add-hook 'haskell-mode-hook
	  (lambda()
	    (haskell-mode 1)
	    (haskell-indent-mode 1)
	    (flymake-haskell-multi-load 1)

	    ))
#+end_src
*** C
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook
	  (lambda()
	    (hs-minor-mode 1)
	    (cwarn-mode t)
      (flyspell-prog-mode t)
	    ))
#+end_src
*** COMMENT C++
#+begin_src emacs-lisp
(add-hook 'c++-mode-common-hook
	  (lambda()
	    (hs-minor-mode 1)
	    (cwarn-mode t)
      (flyspell-prog-mode t)
	    ))
#+end_src

*** Python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
	  (lambda()
		 (setq indent-tabs-mode t)
		 (setq python-indednt 8)
		 (setq tab-width 4)
		 (hs-minor-mode 1)
		 (global-set-key (kbd "H-z") 'hs-toggle-hiding)
		 (global-set-key (kbd "H-x") 'hs-hide-all)
		 (global-set-key (kbd "H-c") 'hs-show-all)
		 ;;(elpy-mode 1)
		 )
	  )
#+end_src

** Mode recognition
#+begin_src emacs-lisp
(autoload 'glsl-mode "glsl-mode" nil t)
(setq auto-mode-alist
      '(
	("\\.org$" . org-mode)
	("\\.org.gpg$" . org-mode)
	("\\.ref$" . org-mode)
	("\\.ref.gpg$" . org-mode)
	("\\.notes$" . org-mode)

	("\\.pdf\\'" . doc-view-mode)

	;;programming modes
	("\\.hs$" . haskell-mode)
	("\\.py\\'" . python-mode)
	("\\.cpp\\'" . c++-mode)
	("\\.h\\'" . c++-mode)
	("\\.lua\\'" . lua-mode)

	("\\.s\\'" . c++-mode)
	("\\.mc\\'" . c++-mode)

	("\\.el\\'" . emacs-lisp-mode)

	("\\.vert\\'" . glsl-mode)
	("\\.frag\\'" . glsl-mode)
	("\\.glsl\\'" . glsl-mode)
	))
#+end_src

** key chord
#+begin_src emacs-lisp

(require 'key-chord)
(key-chord-mode 1)

(key-chord-define-global "hj"     'undo)
(key-chord-define-global ",."     "<>\C-b")
#+end_src
** yas
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
** Helm
#+begin_src emacs-lisp
(require 'helm-config)
(define-key ctl-x-map   "b" 'helm-mini)
(define-key ctl-x-map   "i" 'helm-semantic-or-imenu)

(define-key control-semi-map (kbd "l") 'helm-M-x)
(define-key control-semi-map (kbd "o") 'helm-occur)
(define-key control-semi-map (kbd "C-o") 'helm-multi-occur)

(define-key control-semi-map (kbd "r") 'helm-mark-ring)
(define-key control-semi-map (kbd "C-r") 'helm-all-mark-rings)

(define-key control-semi-map (kbd "b") 'helm-resume)
(define-key control-semi-map (kbd "C-b") 'helm-resume)

(define-key control-semi-map (kbd "C-m") 'helm-swoop)
(define-key control-semi-map (kbd "m") 'helm-multi-swoop-all)

(require 'all-ext) ;; C-c C-a jumps to all from helm-occur
#+end_src

** custom
#+begin_src emacs-lisp
(defun reload-emacs-config ()
(interactive)
(load-file "~/.emacs")
)

(defun destruct-emacs-config ()
(interactive)
(delete-file "~/.emacs.d/emacs.org")
)

(defun get-repo-config()
(interactive)
(destruct-emacs-config)
(reload-emacs-config)
)
#+end_src

# 
** magit
#+begin_src emacs-lisp
(define-key control-semi-map (kbd "1") 'magit-status)

(defvar magit-command-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "m") 'magit-status)
    (define-key map (kbd "s") 'magit-stash)
    (define-key map (kbd "p") 'magit-stash-pop)
    (define-key map (kbd "l") 'magit-log)
    map))
(fset 'magit-command-map magit-command-map)
#+end_src

* ALIAS                                                        :config:alias:
#+begin_src emacs-lisp

;;Too lazy for this
(defalias 'yes-or-no-p 'y-or-n-p)

(defalias 'rel 'reload-emacs-config)
(defalias 'lp 'list-packages)
(defalias 'igf 'igrep-find)
(defalias 'msf 'menu-set-font)


#+end_src
